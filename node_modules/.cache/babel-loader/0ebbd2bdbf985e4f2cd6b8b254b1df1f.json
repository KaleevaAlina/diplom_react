{"ast":null,"code":"import { takeEvery, all } from \"redux-saga/effects\";\nimport lodash from \"lodash\";\nimport * as callMethods from \"./callMethodsLogRegCreate\";\nexport function* mySagaGeneric(action) {\n  const {\n    payload,\n    type\n  } = action;\n  console.log(payload, \"PAYLOAD\");\n  console.log(type, \"TYPE\");\n  const methodName = lodash.camelCase(type);\n  const request = callMethods[methodName](payload);\n  yield request;\n}\nexport function* mySagaAll(action) {\n  yield takeEvery(({\n    type\n  }) => /_REQUEST$/g.test(type), mySagaGeneric);\n}\nexport function* rootSaga() {\n  yield all([mySagaAll()]);\n}","map":{"version":3,"sources":["D:/IT_SHATLE/Course_react/09-02-2021/src/sagas/index.js"],"names":["takeEvery","all","lodash","callMethods","mySagaGeneric","action","payload","type","console","log","methodName","camelCase","request","mySagaAll","test","rootSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,QAA+B,oBAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AAGA,OAAO,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqB,SAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkB,MAAlB;AACA,QAAMG,UAAU,GAAGR,MAAM,CAACS,SAAP,CAAiBJ,IAAjB,CAAnB;AACA,QAAMK,OAAO,GAAGT,WAAW,CAACO,UAAD,CAAX,CAAwBJ,OAAxB,CAAhB;AACA,QAAMM,OAAN;AACD;AAED,OAAO,UAAUC,SAAV,CAAoBR,MAApB,EAA4B;AACjC,QAAML,SAAS,CAAC,CAAC;AAAEO,IAAAA;AAAF,GAAD,KAAc,aAAaO,IAAb,CAAkBP,IAAlB,CAAf,EAAwCH,aAAxC,CAAf;AACD;AAED,OAAO,UAAUW,QAAV,GAAqB;AAC1B,QAAMd,GAAG,CAAC,CAACY,SAAS,EAAV,CAAD,CAAT;AACD","sourcesContent":["import { takeEvery, all } from \"redux-saga/effects\";\nimport lodash from \"lodash\";\nimport * as callMethods from \"./callMethodsLogRegCreate\";\n\n\nexport function* mySagaGeneric(action) {\n  const { payload, type } = action;\n  console.log(payload, \"PAYLOAD\");\n  console.log(type, \"TYPE\");\n  const methodName = lodash.camelCase(type);\n  const request = callMethods[methodName](payload);\n  yield request;\n}\n\nexport function* mySagaAll(action) {\n  yield takeEvery(({ type }) => /_REQUEST$/g.test(type), mySagaGeneric);\n}\n\nexport function* rootSaga() {\n  yield all([mySagaAll()]);\n}\n"]},"metadata":{},"sourceType":"module"}