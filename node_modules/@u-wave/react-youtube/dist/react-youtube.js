'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var loadScript = require('load-script2');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var loadScript__default = /*#__PURE__*/_interopDefaultLegacy(loadScript);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var eventNames = ['onReady', 'onStateChange', 'onPlaybackQualityChange', 'onPlaybackRateChange', 'onError', 'onApiChange'];

/* global window */

function loadSdk() {
  return new Promise(function (resolve, reject) {
    if (typeof window.YT === 'object' && typeof window.YT.ready === 'function') {
      // A YouTube SDK is already loaded, so reuse that
      window.YT.ready(function () {
        resolve(window.YT);
      });
      return;
    }

    loadScript__default['default']('https://www.youtube.com/iframe_api', function (err) {
      if (err) {
        reject(err);
      } else {
        window.YT.ready(function () {
          resolve(window.YT);
        });
      }
    });
  });
}

var sdk = null;
function getSdk() {
  if (!sdk) {
    sdk = loadSdk();
  }

  return sdk;
}

var YouTube = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(YouTube, _React$Component);

  function YouTube(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.onPlayerReady = _this.onPlayerReady.bind(_assertThisInitialized(_this));
    _this.onPlayerStateChange = _this.onPlayerStateChange.bind(_assertThisInitialized(_this));
    _this.refContainer = _this.refContainer.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = YouTube.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    // eslint-disable-next-line react/destructuring-assignment
    var changes = Object.keys(this.props).filter(function (name) {
      return _this2.props[name] !== prevProps[name];
    });
    this.updateProps(changes);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.playerInstance) {
      this.playerInstance.destroy();
    }
  };

  _proto.onPlayerReady = function onPlayerReady(event) {
    var _this$props = this.props,
        volume = _this$props.volume,
        muted = _this$props.muted,
        suggestedQuality = _this$props.suggestedQuality,
        playbackRate = _this$props.playbackRate;

    if (typeof volume !== 'undefined') {
      event.target.setVolume(volume * 100);
    }

    if (typeof muted !== 'undefined') {
      if (muted) {
        event.target.mute();
      } else {
        event.target.unMute();
      }
    }

    if (typeof suggestedQuality !== 'undefined') {
      event.target.setPlaybackQuality(suggestedQuality);
    }

    if (typeof playbackRate !== 'undefined') {
      event.target.setPlaybackRate(playbackRate);
    }

    this.resolvePlayer(event.target);
  };

  _proto.onPlayerStateChange = function onPlayerStateChange(event) {
    var _this$props2 = this.props,
        onCued = _this$props2.onCued,
        onBuffering = _this$props2.onBuffering,
        onPause = _this$props2.onPause,
        onPlaying = _this$props2.onPlaying,
        onEnd = _this$props2.onEnd;
    var State = YT.PlayerState; // eslint-disable-line no-undef

    switch (event.data) {
      case State.CUED:
        onCued(event);
        break;

      case State.BUFFERING:
        onBuffering(event);
        break;

      case State.PAUSED:
        onPause(event);
        break;

      case State.PLAYING:
        onPlaying(event);
        break;

      case State.ENDED:
        onEnd(event);
        break;

    }
  }
  /**
   * @private
   */
  ;

  _proto.getPlayerParameters = function getPlayerParameters() {
    /* eslint-disable react/destructuring-assignment */
    return {
      autoplay: this.props.autoplay,
      cc_load_policy: this.props.showCaptions ? 1 : 0,
      controls: this.props.controls ? 1 : 0,
      disablekb: this.props.disableKeyboard ? 1 : 0,
      fs: this.props.allowFullscreen ? 1 : 0,
      hl: this.props.lang,
      iv_load_policy: this.props.annotations ? 1 : 3,
      start: this.props.startSeconds,
      end: this.props.endSeconds,
      modestbranding: this.props.modestBranding ? 1 : 0,
      playsinline: this.props.playsInline ? 1 : 0,
      rel: this.props.showRelatedVideos ? 1 : 0,
      showinfo: this.props.showInfo ? 1 : 0
    };
    /* eslint-enable react/destructuring-assignment */
  }
  /**
   * @private
   */
  ;

  _proto.getInitialOptions = function getInitialOptions() {
    /* eslint-disable react/destructuring-assignment */
    return {
      videoId: this.props.video,
      width: this.props.width,
      height: this.props.height,
      playerVars: this.getPlayerParameters(),
      events: {
        onReady: this.onPlayerReady,
        onStateChange: this.onPlayerStateChange
      }
    };
    /* eslint-enable react/destructuring-assignment */
  }
  /**
   * @private
   */
  ;

  _proto.updateProps = function updateProps(propNames) {
    var _this3 = this;

    this.player.then(function (player) {
      propNames.forEach(function (name) {
        // eslint-disable-next-line react/destructuring-assignment
        var value = _this3.props[name];

        switch (name) {
          case 'muted':
            if (value) {
              player.mute();
            } else {
              player.unMute();
            }

            break;

          case 'suggestedQuality':
            player.setPlaybackQuality(value);
            break;

          case 'volume':
            player.setVolume(value * 100);
            break;

          case 'paused':
            if (value && player.getPlayerState() !== 2) {
              player.pauseVideo();
            } else if (!value && player.getPlayerState() === 2) {
              player.playVideo();
            }

            break;

          case 'id':
          case 'className':
          case 'width':
          case 'height':
            player.getIframe()[name] = value; // eslint-disable-line no-param-reassign

            break;

          case 'video':
            if (!value) {
              player.stopVideo();
            } else {
              var _this3$props = _this3.props,
                  startSeconds = _this3$props.startSeconds,
                  endSeconds = _this3$props.endSeconds,
                  autoplay = _this3$props.autoplay;
              var opts = {
                videoId: value,
                startSeconds: startSeconds || 0,
                endSeconds: endSeconds
              };

              if (autoplay) {
                player.loadVideoById(opts);
              } else {
                player.cueVideoById(opts);
              }
            }

            break;

        }
      });
    });
  }
  /**
   * @private
   */
  ;

  _proto.createPlayer = function createPlayer() {
    var _this4 = this;

    var volume = this.props.volume;
    this.player = getSdk().then(function (YT) {
      return new Promise(function (resolve) {
        _this4.resolvePlayer = resolve;
        var player = new YT.Player(_this4.container, _this4.getInitialOptions()); // Store the instance directly so we can destroy it sync in
        // `componentWillUnmount`.

        _this4.playerInstance = player;
        eventNames.forEach(function (name) {
          player.addEventListener(name, function (event) {
            // eslint-disable-next-line react/destructuring-assignment
            var handler = _this4.props[name];

            if (handler) {
              handler(event);
            }
          });
        });
      });
    });

    if (typeof volume === 'number') {
      this.updateProps(['volume']);
    }
  }
  /**
   * @private
   */
  ;

  _proto.refContainer = function refContainer(container) {
    this.container = container;
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        id = _this$props3.id,
        className = _this$props3.className,
        style = _this$props3.style;
    return /*#__PURE__*/React.createElement("div", {
      id: id,
      className: className,
      style: style,
      ref: this.refContainer
    });
  };

  return YouTube;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  YouTube.propTypes = {
    /**
     * An 11-character string representing a YouTube video ID..
     */
    video: PropTypes__default['default'].string,

    /**
     * DOM ID for the player element.
     */
    id: PropTypes__default['default'].string,

    /**
     * CSS className for the player element.
     */
    className: PropTypes__default['default'].string,

    /**
     * Inline style for container element.
     */
    style: PropTypes__default['default'].object,
    // eslint-disable-line react/forbid-prop-types

    /**
     * Width of the player element.
     */
    width: PropTypes__default['default'].oneOfType([PropTypes__default['default'].number, PropTypes__default['default'].string]),

    /**
     * Height of the player element.
     */
    height: PropTypes__default['default'].oneOfType([PropTypes__default['default'].number, PropTypes__default['default'].string]),

    /**
     * Pause the video.
     */
    paused: PropTypes__default['default'].bool,
    // eslint-disable-line react/no-unused-prop-types
    // Player parameters

    /**
     * Whether the video should start playing automatically.
     *
     * https://developers.google.com/youtube/player_parameters#autoplay
     */
    autoplay: PropTypes__default['default'].bool,

    /**
     * Whether to show captions below the video.
     *
     * https://developers.google.com/youtube/player_parameters#cc_load_policy
     */
    showCaptions: PropTypes__default['default'].bool,

    /**
     * Whether to show video controls.
     *
     * https://developers.google.com/youtube/player_parameters#controls
     */
    controls: PropTypes__default['default'].bool,

    /**
     * Ignore keyboard controls.
     *
     * https://developers.google.com/youtube/player_parameters#disablekb
     */
    disableKeyboard: PropTypes__default['default'].bool,

    /**
     * Whether to display the fullscreen button.
     *
     * https://developers.google.com/youtube/player_parameters#fs
     */
    allowFullscreen: PropTypes__default['default'].bool,

    /**
     * The player's interface language. The parameter value is an ISO 639-1
     * two-letter language code or a fully specified locale.
     *
     * https://developers.google.com/youtube/player_parameters#hl
     */
    lang: PropTypes__default['default'].string,

    /**
     * Whether to show annotations on top of the video.
     *
     * https://developers.google.com/youtube/player_parameters#iv_load_policy
     */
    annotations: PropTypes__default['default'].bool,

    /**
     * Time in seconds at which to start playing the video.
     *
     * https://developers.google.com/youtube/player_parameters#start
     */
    startSeconds: PropTypes__default['default'].number,

    /**
     * Time in seconds at which to stop playing the video.
     *
     * https://developers.google.com/youtube/player_parameters#end
     */
    endSeconds: PropTypes__default['default'].number,

    /**
     * Remove most YouTube logos from the player.
     *
     * https://developers.google.com/youtube/player_parameters#modestbranding
     */
    modestBranding: PropTypes__default['default'].bool,

    /**
     * Whether to play the video inline on iOS, instead of fullscreen.
     *
     * https://developers.google.com/youtube/player_parameters#playsinline
     */
    playsInline: PropTypes__default['default'].bool,

    /**
     * Whether to show related videos after the video is over.
     *
     * https://developers.google.com/youtube/player_parameters#rel
     */
    showRelatedVideos: PropTypes__default['default'].bool,

    /**
     * Whether to show video information (uploader, title, etc) before the video
     * starts.
     *
     * **This parameter has been deprecated and has no effect.**
     *
     * https://developers.google.com/youtube/player_parameters#showinfo
     */
    showInfo: PropTypes__default['default'].bool,

    /**
     * The playback volume, **as a number between 0 and 1**.
     */
    volume: PropTypes__default['default'].number,

    /**
     * Whether the video's sound should be muted.
     */
    muted: PropTypes__default['default'].bool,

    /**
     * The suggested playback quality.
     *
     * https://developers.google.com/youtube/iframe_api_reference#Playback_quality
     */
    suggestedQuality: PropTypes__default['default'].string,

    /**
     * Playback speed.
     *
     * https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate
     */
    playbackRate: PropTypes__default['default'].number,
    // Events

    /* eslint-disable react/no-unused-prop-types */

    /**
     * Sent when the YouTube player API has loaded.
     */
    onReady: PropTypes__default['default'].func,

    /**
     * Sent when the player triggers an error.
     */
    onError: PropTypes__default['default'].func,

    /**
     * Sent when the video is cued and ready to play.
     */
    onCued: PropTypes__default['default'].func,

    /**
     * Sent when the video is buffering.
     */
    onBuffering: PropTypes__default['default'].func,

    /**
     * Sent when playback has been started or resumed.
     */
    onPlaying: PropTypes__default['default'].func,

    /**
     * Sent when playback has been paused.
     */
    onPause: PropTypes__default['default'].func,

    /**
     * Sent when playback has stopped.
     */
    onEnd: PropTypes__default['default'].func,
    onStateChange: PropTypes__default['default'].func,
    onPlaybackRateChange: PropTypes__default['default'].func,
    onPlaybackQualityChange: PropTypes__default['default'].func
    /* eslint-enable react/no-unused-prop-types */

  };
}

YouTube.defaultProps = {
  autoplay: false,
  showCaptions: false,
  controls: true,
  disableKeyboard: false,
  allowFullscreen: true,
  annotations: true,
  modestBranding: false,
  playsInline: false,
  showRelatedVideos: true,
  showInfo: true,
  onCued: function onCued() {},
  onBuffering: function onBuffering() {},
  onPlaying: function onPlaying() {},
  onPause: function onPause() {},
  onEnd: function onEnd() {}
};

exports.default = YouTube;
